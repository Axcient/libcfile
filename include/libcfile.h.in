/*
 * Library to support cross-platform C path functions
 *
 * Copyright (c) 2008-2012, Joachim Metz <jbmetz@users.sourceforge.net>
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBCFILE_H )
#define _LIBCFILE_H

#include <libcfile/codepage.h>
#include <libcfile/definitions.h>
#include <libcfile/error.h>
#include <libcfile/extern.h>
#include <libcfile/features.h>
#include <libcfile/types.h>

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Support functions
 * ------------------------------------------------------------------------- */

/* Returns the library version as a string
 */
LIBCFILE_EXTERN \
const char *libcfile_get_version(
             void );

LIBCFILE_EXTERN \
int libcfile_file_exists(
     const char *filename,
     libcfile_error_t **error );

#if defined( HAVE_WIDE_CHARACTER_TYPE )

LIBCFILE_EXTERN \
int libcfile_file_exists_wide(
     const wchar_t *filename,
     libcfile_error_t **error );

#endif /* defined( HAVE_WIDE_CHARACTER_TYPE ) */

/* -------------------------------------------------------------------------
 * Error functions
 * ------------------------------------------------------------------------- */

/* Frees the error including elements
 */
LIBCFILE_EXTERN \
void libcfile_error_free(
      libcfile_error_t **error );

/* Prints a descriptive string of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_error_fprint(
     libcfile_error_t *error,
     FILE *stream );

/* Prints a descriptive string of the error to the string
 * Returns the number of printed characters if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_error_sprint(
     libcfile_error_t *error,
     char *string, 
     size_t size );

/* Prints a backtrace of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_error_backtrace_fprint(
     libcfile_error_t *error,
     FILE *stream );

/* Prints a backtrace of the error to the string
 * Returns the number of printed characters if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_error_backtrace_sprint(
     libcfile_error_t *error,
     char *string,
     size_t size );

/* -------------------------------------------------------------------------
 * File functions
 * ------------------------------------------------------------------------- */

/* Initializes the file
 * Returns 1 if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_initialize(
     libcfile_file_t **file,
     libcfile_error_t **error );

/* Frees the file including elements
 * Returns 1 if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_free(
     libcfile_file_t **file,
     libcfile_error_t **error );

/* Opens a file
 * Returns 1 if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_open(
     libcfile_file_t *file,
     const char *filename,
     int access_flags,
     libcfile_error_t **error );

#if defined( HAVE_WIDE_CHARACTER_TYPE )

/* Opens a file
 * Returns 1 if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_open_wide(
     libcfile_file_t *file,
     const wchar_t *filename,
     int access_flags,
     libcfile_error_t **error );

#endif /* defined( HAVE_WIDE_CHARACTER_TYPE ) */

/* Closes the file
 * Returns 0 if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_close(
     libcfile_file_t *file,
     libcfile_error_t **error );

/* Reads a buffer from the file
 * Returns the number of bytes read if successful, or -1 on error
 */
LIBCFILE_EXTERN \
ssize_t libcfile_file_read_buffer(
         libcfile_file_t *file,
         uint8_t *buffer,
         size_t size,
         libcfile_error_t **error );

/* Writes a buffer to the file
 * Returns the number of bytes written if successful, or -1 on error
 */
LIBCFILE_EXTERN \
ssize_t libcfile_file_write_buffer(
         libcfile_file_t *file,
         const uint8_t *buffer,
         size_t size,
         libcfile_error_t **error );

/* Seeks a certain offset within the file
 * Returns the offset if the seek is successful or -1 on error
 */
LIBCFILE_EXTERN \
off64_t libcfile_file_seek_offset(
         libcfile_file_t *file,
         off64_t offset,
         int whence,
         libcfile_error_t **error );

/* Resizes the file
 * Returns 1 if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_resize(
     libcfile_file_t *file,
     size64_t size,
     libcfile_error_t **error );

/* Checks if the file is open
 * Returns 1 if open, 0 if not or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_is_open(
     libcfile_file_t *file,
     libcfile_error_t **error );

/* Retrieves the current offset in the file
 * Returns 1 if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_get_offset(
     libcfile_file_t *file,
     off64_t *offset,
     libcfile_error_t **error );

/* Retrieves the size of the file
 * Returns 1 if successful or -1 on error
 */
LIBCFILE_EXTERN \
int libcfile_file_get_size(
     libcfile_file_t *file,
     size64_t *size,
     libcfile_error_t **error );

#if defined( __cplusplus )
}
#endif

#endif

